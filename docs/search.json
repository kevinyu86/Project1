[
  {
    "objectID": "Project1.html",
    "href": "Project1.html",
    "title": "Project1",
    "section": "",
    "text": "In this part, I will read in and parse data step and step.\nRead in data set\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.0     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(tidyr)\ndat &lt;- read_csv(\"https://www4.stat.ncsu.edu/~online/datasets/EDU01a.csv\", col_names = TRUE)\n\nRows: 3198 Columns: 42\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (22): Area_name, STCOU, EDU010187N1, EDU010187N2, EDU010188N1, EDU010188...\ndbl (20): EDU010187F, EDU010187D, EDU010188F, EDU010188D, EDU010189F, EDU010...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nSelect columns: Area_name, STCOU, and any column ends in “D”\n\n\nselected_dat &lt;- dat |&gt; \n  select(Area_name, STCOU, ends_with(\"D\")) |&gt;\n  rename(\"area_name\" = \"Area_name\")\n\n\nConvert the data into long format\n\n\nlong_dat &lt;- selected_dat |&gt;\n  pivot_longer(cols = 3:12,\n               names_to = \"enrollment\",\n               values_to = \"number\")\n\n\nParse enrollment into two new columns\n\n\nparse_dat &lt;- long_dat |&gt;\n  separate_wider_position(enrollment, c(measurement = 3, 4, year = 2, 1))|&gt;\n  mutate(year = ifelse(as.numeric(year) &lt; 10, as.numeric(year) + 2000, as.numeric(year) + 1900))\n\n\ncreate non-county data and county data\n\n\ncounty_dat &lt;- parse_dat |&gt;\n  filter(grepl(pattern = \", \\\\w\\\\w\", area_name)) \nclass(county_dat) &lt;- c(\"county\", class(county_dat))\n\nnon_county_dat &lt;- parse_dat |&gt;\n  filter(!grepl(pattern = \", \\\\w\\\\w\", area_name)) \nclass(non_county_dat) &lt;- c(\"state\", class(non_county_dat))\n\n\nCreate new variable for county data\n\n\nfinal_county_dat &lt;- county_dat |&gt;\n  mutate(state = substr(area_name, nchar(area_name)-1, nchar(area_name)))\n\n\nAdd division information to non-county data\n\n\nfinal_non_county_dat &lt;- non_county_dat |&gt;\n  mutate(division = case_when(\n                        area_name %in% c(\"CONNECTICUT\", \"MAINE\", \"MASSACHUSETTS\", \"NEW HAMPSHIRE\", \"RHODE ISLAND\", \"VERMONT\") ~ \"Division 1\",\n                        area_name %in% c('NEW JERSEY', 'NEW YORK', 'PENNSYLVANIA') ~ \"Division 2\",\n                        area_name %in% c('ILLINOIS', 'INDIANA', 'MICHIGAN', 'OHIO', 'WISCONSIN') ~ \"Division 3\",\n                        area_name %in% c('IOWA', 'KANSAS', 'MINNESOTA', 'MISSOURI', 'NEBRASKA', 'NORTH DAKOTA', 'SOUTH DAKOTA') ~ \"Division 4\",\n                        area_name %in% c('DELAWARE', 'FLORIDA', 'GEORGIA', 'MARYLAND', 'NORTH CAROLINA', 'SOUTH CAROLINA', 'VIRGINIA', 'DISTRICT OF COLUMBIA', 'District of Columbia', 'WEST VIRGINIA') ~ \"Division 5\",\n                        area_name %in% c('ALABAMA', 'KENTUCKY', 'MISSISSIPPI', 'TENNESSEE') ~ \"Division 6\",\n                        area_name %in% c('ARKANSAS', 'LOUISIANA', 'OKLAHOMA', 'TEXAS') ~ \"Division 7\",\n                        area_name %in% c('ARIZONA', 'COLORADO', 'IDAHO', 'MONTANA', 'NEVADA', 'NEW MEXICO', 'UTAH', 'WYOMING') ~ \"Division 8\",\n                        area_name %in% c('ALASKA', 'CALIFORNIA', 'HAWAII', 'OREGON', 'WASHINGTON') ~ \"Division 9\",\n                        area_name == \"UNITED STATES\" ~ \"ERROR\",\n ) \n) \n\n\n\n\nFunction does steps 1 & 2\n\nfunction_for_step_1_2 &lt;- function(dat, default_var_name = \"number\") {\n  result_from_step2 &lt;- dat |&gt; \n    select(Area_name, STCOU, ends_with(\"D\")) |&gt;\n    rename(\"area_name\" = \"Area_name\") |&gt;\n    pivot_longer(cols = 3:12,\n               names_to = \"enrollment\",\n               values_to = default_var_name)\n}\n\nFunction for step 3\n\nfunction_for_step_3 &lt;- function(result_from_step2) {\n  result_from_step3 &lt;- result_from_step2 |&gt;\n    separate_wider_position(enrollment, c(measurement = 3, 4, year = 2, 1))|&gt;\n    mutate(year = ifelse(as.numeric(year) &lt; 10, as.numeric(year) + 2000, as.numeric(year) + 1900))\n}\n\nFunction for step 5\n\nfunction_for_step_5 &lt;- function(county_dat){\n  county_dat |&gt;\n    mutate(state = substr(area_name, nchar(area_name)-1,\n                          nchar(area_name)))\n}\n\nFunction for step 6\n\nfunction_for_step_6 &lt;- function(non_county_dat){\n  non_county_dat |&gt;\n    mutate(division = case_when(\n                        area_name %in% c(\"CONNECTICUT\", \"MAINE\", \"MASSACHUSETTS\", \"NEW HAMPSHIRE\", \"RHODE ISLAND\", \"VERMONT\") ~ \"Division 1\",\n                        area_name %in% c('NEW JERSEY', 'NEW YORK', 'PENNSYLVANIA') ~ \"Division 2\",\n                        area_name %in% c('ILLINOIS', 'INDIANA', 'MICHIGAN', 'OHIO', 'WISCONSIN') ~ \"Division 3\",\n                        area_name %in% c('IOWA', 'KANSAS', 'MINNESOTA', 'MISSOURI', 'NEBRASKA', 'NORTH DAKOTA', 'SOUTH DAKOTA') ~ \"Division 4\",\n                        area_name %in% c('DELAWARE', 'FLORIDA', 'GEORGIA', 'MARYLAND', 'NORTH CAROLINA', 'SOUTH CAROLINA', 'VIRGINIA', 'DISTRICT OF COLUMBIA', 'District of Columbia', 'WEST VIRGINIA') ~ \"Division 5\",\n                        area_name %in% c('ALABAMA', 'KENTUCKY', 'MISSISSIPPI', 'TENNESSEE') ~ \"Division 6\",\n                        area_name %in% c('ARKANSAS', 'LOUISIANA', 'OKLAHOMA', 'TEXAS') ~ \"Division 7\",\n                        area_name %in% c('ARIZONA', 'COLORADO', 'IDAHO', 'MONTANA', 'NEVADA', 'NEW MEXICO', 'UTAH', 'WYOMING') ~ \"Division 8\",\n                        area_name %in% c('ALASKA', 'CALIFORNIA', 'HAWAII', 'OREGON', 'WASHINGTON') ~ \"Division 9\",\n                        area_name == \"UNITED STATES\" ~ \"ERROR\",\n ) \n) \n}\n\nFunction for steps 4, 5, 6\n\nfunction_for_steps4_5_6 &lt;- function(result_from_step3){\n  county_dat &lt;- result_from_step3 |&gt;\n    filter(grepl(pattern = \", \\\\w\\\\w\", area_name)) |&gt;\n    function_for_step_5()\n  class(county_dat) &lt;- c(\"county\", class(county_dat))\n  \n  non_county_dat &lt;- result_from_step3 |&gt;\n    filter(!grepl(pattern = \", \\\\w\\\\w\", area_name)) |&gt;\n    function_for_step_6()\n  class(non_county_dat) &lt;- c(\"state\", class(non_county_dat))\n  return(list(county_dat, non_county_dat))\n}\n\nCreate a wrapper function\n\nmy_wrapper &lt;- function(url, default_var_name = \"number\"){\n  result &lt;- read_csv(url, col_names = TRUE) |&gt;\n    function_for_step_1_2(default_var_name = \"number\") |&gt;\n    function_for_step_3() |&gt;\n    function_for_steps4_5_6()\nreturn(result)\n}\n\n\n\n\n\nmy_combine &lt;- function(x, y){\n  county_dat &lt;- bind_rows(x[1], y[1])\n  non_county_dat &lt;- bind_rows(x[2], y[2])\n  return(list(county_dat, non_county_dat))\n}"
  },
  {
    "objectID": "Project1.html#data-processing",
    "href": "Project1.html#data-processing",
    "title": "Project1",
    "section": "",
    "text": "In this part, I will read in and parse data step and step.\nRead in data set\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.0     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(tidyr)\ndat &lt;- read_csv(\"https://www4.stat.ncsu.edu/~online/datasets/EDU01a.csv\", col_names = TRUE)\n\nRows: 3198 Columns: 42\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (22): Area_name, STCOU, EDU010187N1, EDU010187N2, EDU010188N1, EDU010188...\ndbl (20): EDU010187F, EDU010187D, EDU010188F, EDU010188D, EDU010189F, EDU010...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nSelect columns: Area_name, STCOU, and any column ends in “D”\n\n\nselected_dat &lt;- dat |&gt; \n  select(Area_name, STCOU, ends_with(\"D\")) |&gt;\n  rename(\"area_name\" = \"Area_name\")\n\n\nConvert the data into long format\n\n\nlong_dat &lt;- selected_dat |&gt;\n  pivot_longer(cols = 3:12,\n               names_to = \"enrollment\",\n               values_to = \"number\")\n\n\nParse enrollment into two new columns\n\n\nparse_dat &lt;- long_dat |&gt;\n  separate_wider_position(enrollment, c(measurement = 3, 4, year = 2, 1))|&gt;\n  mutate(year = ifelse(as.numeric(year) &lt; 10, as.numeric(year) + 2000, as.numeric(year) + 1900))\n\n\ncreate non-county data and county data\n\n\ncounty_dat &lt;- parse_dat |&gt;\n  filter(grepl(pattern = \", \\\\w\\\\w\", area_name)) \nclass(county_dat) &lt;- c(\"county\", class(county_dat))\n\nnon_county_dat &lt;- parse_dat |&gt;\n  filter(!grepl(pattern = \", \\\\w\\\\w\", area_name)) \nclass(non_county_dat) &lt;- c(\"state\", class(non_county_dat))\n\n\nCreate new variable for county data\n\n\nfinal_county_dat &lt;- county_dat |&gt;\n  mutate(state = substr(area_name, nchar(area_name)-1, nchar(area_name)))\n\n\nAdd division information to non-county data\n\n\nfinal_non_county_dat &lt;- non_county_dat |&gt;\n  mutate(division = case_when(\n                        area_name %in% c(\"CONNECTICUT\", \"MAINE\", \"MASSACHUSETTS\", \"NEW HAMPSHIRE\", \"RHODE ISLAND\", \"VERMONT\") ~ \"Division 1\",\n                        area_name %in% c('NEW JERSEY', 'NEW YORK', 'PENNSYLVANIA') ~ \"Division 2\",\n                        area_name %in% c('ILLINOIS', 'INDIANA', 'MICHIGAN', 'OHIO', 'WISCONSIN') ~ \"Division 3\",\n                        area_name %in% c('IOWA', 'KANSAS', 'MINNESOTA', 'MISSOURI', 'NEBRASKA', 'NORTH DAKOTA', 'SOUTH DAKOTA') ~ \"Division 4\",\n                        area_name %in% c('DELAWARE', 'FLORIDA', 'GEORGIA', 'MARYLAND', 'NORTH CAROLINA', 'SOUTH CAROLINA', 'VIRGINIA', 'DISTRICT OF COLUMBIA', 'District of Columbia', 'WEST VIRGINIA') ~ \"Division 5\",\n                        area_name %in% c('ALABAMA', 'KENTUCKY', 'MISSISSIPPI', 'TENNESSEE') ~ \"Division 6\",\n                        area_name %in% c('ARKANSAS', 'LOUISIANA', 'OKLAHOMA', 'TEXAS') ~ \"Division 7\",\n                        area_name %in% c('ARIZONA', 'COLORADO', 'IDAHO', 'MONTANA', 'NEVADA', 'NEW MEXICO', 'UTAH', 'WYOMING') ~ \"Division 8\",\n                        area_name %in% c('ALASKA', 'CALIFORNIA', 'HAWAII', 'OREGON', 'WASHINGTON') ~ \"Division 9\",\n                        area_name == \"UNITED STATES\" ~ \"ERROR\",\n ) \n) \n\n\n\n\nFunction does steps 1 & 2\n\nfunction_for_step_1_2 &lt;- function(dat, default_var_name = \"number\") {\n  result_from_step2 &lt;- dat |&gt; \n    select(Area_name, STCOU, ends_with(\"D\")) |&gt;\n    rename(\"area_name\" = \"Area_name\") |&gt;\n    pivot_longer(cols = 3:12,\n               names_to = \"enrollment\",\n               values_to = default_var_name)\n}\n\nFunction for step 3\n\nfunction_for_step_3 &lt;- function(result_from_step2) {\n  result_from_step3 &lt;- result_from_step2 |&gt;\n    separate_wider_position(enrollment, c(measurement = 3, 4, year = 2, 1))|&gt;\n    mutate(year = ifelse(as.numeric(year) &lt; 10, as.numeric(year) + 2000, as.numeric(year) + 1900))\n}\n\nFunction for step 5\n\nfunction_for_step_5 &lt;- function(county_dat){\n  county_dat |&gt;\n    mutate(state = substr(area_name, nchar(area_name)-1,\n                          nchar(area_name)))\n}\n\nFunction for step 6\n\nfunction_for_step_6 &lt;- function(non_county_dat){\n  non_county_dat |&gt;\n    mutate(division = case_when(\n                        area_name %in% c(\"CONNECTICUT\", \"MAINE\", \"MASSACHUSETTS\", \"NEW HAMPSHIRE\", \"RHODE ISLAND\", \"VERMONT\") ~ \"Division 1\",\n                        area_name %in% c('NEW JERSEY', 'NEW YORK', 'PENNSYLVANIA') ~ \"Division 2\",\n                        area_name %in% c('ILLINOIS', 'INDIANA', 'MICHIGAN', 'OHIO', 'WISCONSIN') ~ \"Division 3\",\n                        area_name %in% c('IOWA', 'KANSAS', 'MINNESOTA', 'MISSOURI', 'NEBRASKA', 'NORTH DAKOTA', 'SOUTH DAKOTA') ~ \"Division 4\",\n                        area_name %in% c('DELAWARE', 'FLORIDA', 'GEORGIA', 'MARYLAND', 'NORTH CAROLINA', 'SOUTH CAROLINA', 'VIRGINIA', 'DISTRICT OF COLUMBIA', 'District of Columbia', 'WEST VIRGINIA') ~ \"Division 5\",\n                        area_name %in% c('ALABAMA', 'KENTUCKY', 'MISSISSIPPI', 'TENNESSEE') ~ \"Division 6\",\n                        area_name %in% c('ARKANSAS', 'LOUISIANA', 'OKLAHOMA', 'TEXAS') ~ \"Division 7\",\n                        area_name %in% c('ARIZONA', 'COLORADO', 'IDAHO', 'MONTANA', 'NEVADA', 'NEW MEXICO', 'UTAH', 'WYOMING') ~ \"Division 8\",\n                        area_name %in% c('ALASKA', 'CALIFORNIA', 'HAWAII', 'OREGON', 'WASHINGTON') ~ \"Division 9\",\n                        area_name == \"UNITED STATES\" ~ \"ERROR\",\n ) \n) \n}\n\nFunction for steps 4, 5, 6\n\nfunction_for_steps4_5_6 &lt;- function(result_from_step3){\n  county_dat &lt;- result_from_step3 |&gt;\n    filter(grepl(pattern = \", \\\\w\\\\w\", area_name)) |&gt;\n    function_for_step_5()\n  class(county_dat) &lt;- c(\"county\", class(county_dat))\n  \n  non_county_dat &lt;- result_from_step3 |&gt;\n    filter(!grepl(pattern = \", \\\\w\\\\w\", area_name)) |&gt;\n    function_for_step_6()\n  class(non_county_dat) &lt;- c(\"state\", class(non_county_dat))\n  return(list(county_dat, non_county_dat))\n}\n\nCreate a wrapper function\n\nmy_wrapper &lt;- function(url, default_var_name = \"number\"){\n  result &lt;- read_csv(url, col_names = TRUE) |&gt;\n    function_for_step_1_2(default_var_name = \"number\") |&gt;\n    function_for_step_3() |&gt;\n    function_for_steps4_5_6()\nreturn(result)\n}\n\n\n\n\n\nmy_combine &lt;- function(x, y){\n  county_dat &lt;- bind_rows(x[1], y[1])\n  non_county_dat &lt;- bind_rows(x[2], y[2])\n  return(list(county_dat, non_county_dat))\n}"
  },
  {
    "objectID": "Project1.html#data-sumarizing",
    "href": "Project1.html#data-sumarizing",
    "title": "Project1",
    "section": "Data Sumarizing",
    "text": "Data Sumarizing\n\nFirstly, we write a function to plot state data.\n\nplot.state &lt;- function(df, var_name = \"number\"){\n  df$year &lt;- as.factor(df$year)\n  ggplot(data = df |&gt;\n           filter(division != \"ERROR\") |&gt;\n           group_by(year, division) |&gt;\n           summarize(Enrollment_mean = mean(get(var_name))), \n         aes(x = year, y = Enrollment_mean, group = division, color = division)) +\n           geom_line() +\n           geom_point() +\n           labs(x = \"Year\")\n}\n\n\n\nThen, we write a function to plot county data.\n\nplot.county &lt;- function(df, Interest_state = \"NC\", var_name = \"number\", group = \"Top\", n = 5){\n  df$year &lt;- as.factor(df$year)\n  \n  ranking &lt;- df |&gt; \n    filter(state == Interest_state) |&gt;\n    group_by(area_name) |&gt;\n    summarize(county_mean = mean(get(var_name))) |&gt;\n    arrange(desc(county_mean))\n      \n  if (group == \"Top\") {\n    selected_area_name &lt;- ranking$area_name[1:n]\n  } else if (group == \"Bottom\") {\n    selected_area_name &lt;- tail(ranking$area_name, n)\n  }\n    \n  ggplot(data = df |&gt;\n           filter(area_name %in% selected_area_name) |&gt;\n           group_by(year, area_name) |&gt;\n           summarize(Enrollment_mean = mean(get(var_name))), \n         aes(x = year, y = Enrollment_mean, group = area_name, color = area_name)) +\n           geom_line() +\n           geom_point() +\n           labs(x = \"Year\")\n}"
  },
  {
    "objectID": "Project1.html#put-it-together",
    "href": "Project1.html#put-it-together",
    "title": "Project1",
    "section": "Put it Together",
    "text": "Put it Together\n\nFirstly, we call the wrapper function twice to read in and parse two data sets.\n\ndat1 &lt;- my_wrapper(\"https://www4.stat.ncsu.edu/~online/datasets/EDU01a.csv\", default_var_name)\n\nRows: 3198 Columns: 42\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (22): Area_name, STCOU, EDU010187N1, EDU010187N2, EDU010188N1, EDU010188...\ndbl (20): EDU010187F, EDU010187D, EDU010188F, EDU010188D, EDU010189F, EDU010...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ndat2 &lt;- my_wrapper(\"https://www4.stat.ncsu.edu/~online/datasets/EDU01b.csv\", default_var_name)\n\nRows: 3198 Columns: 42\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (22): Area_name, STCOU, EDU010197N1, EDU010197N2, EDU010198N1, EDU010198...\ndbl (20): EDU010197F, EDU010197D, EDU010198F, EDU010198D, EDU010199F, EDU010...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nThen, we call the combining function to put two data sets into one object\n\nFinal_dat &lt;- my_combine(x=dat1, y=dat2)\n\n\n\nUse the plot function on the state data frame.\n\nplot.state(df = Final_dat[[2]], var_name = \"number\")\n\n`summarise()` has grouped output by 'year'. You can override using the\n`.groups` argument.\n\n\n\n\n\n\n\n\n\n\n\nUse the plot function on the county data frame\nOnce specifying the state to be “NC”, the group being the top, the number looked at being 20\n\nplot.county(df=Final_dat[[1]], Interest_state = \"NC\", var_name = \"number\", group = \"Top\", n = 20)\n\n`summarise()` has grouped output by 'year'. You can override using the\n`.groups` argument.\n\n\n\n\n\n\n\n\n\nOnce specifying the state to be “SC”, the group being the bottom, the number looked at being 7\n\nplot.county(df=Final_dat[[1]], Interest_state = \"SC\", var_name = \"number\", group = \"Bottom\", n = 7)\n\n`summarise()` has grouped output by 'year'. You can override using the\n`.groups` argument.\n\n\n\n\n\n\n\n\n\nOnce without specifying anything (defaults used)\n\nplot.county(df=Final_dat[[1]])\n\n`summarise()` has grouped output by 'year'. You can override using the\n`.groups` argument.\n\n\n\n\n\n\n\n\n\nOnce specifying the state to be “PA”, the group being the top, the number looked at being 8\n\nplot.county(df=Final_dat[[1]], Interest_state = \"PA\", var_name = \"number\", group = \"Top\", n = 8)\n\n`summarise()` has grouped output by 'year'. You can override using the\n`.groups` argument.\n\n\n\n\n\n\n\n\n\n\n\nLastly, read in another couple similar data sets and apply our functions!\n\ndat3 &lt;- my_wrapper(\"https://www4.stat.ncsu.edu/~online/datasets/PST01a.csv\", default_var_name)\n\nRows: 3198 Columns: 42\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (22): Area_name, STCOU, PST015171N1, PST015171N2, PST015172N1, PST015172...\ndbl (20): PST015171F, PST015171D, PST015172F, PST015172D, PST015173F, PST015...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ndat4 &lt;- my_wrapper(\"https://www4.stat.ncsu.edu/~online/datasets/PST01b.csv\", default_var_name)\n\nRows: 3198 Columns: 42\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (22): Area_name, STCOU, PST025182N1, PST025182N2, PST025183N1, PST025183...\ndbl (20): PST025182F, PST025182D, PST025183F, PST025183D, PST025184F, PST025...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ndat5 &lt;- my_wrapper(\"https://www4.stat.ncsu.edu/~online/datasets/PST01c.csv\", default_var_name)\n\nRows: 3198 Columns: 42\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (22): Area_name, STCOU, PST035191N1, PST035191N2, PST035192N1, PST035192...\ndbl (20): PST035191F, PST035191D, PST035192F, PST035192D, PST035193F, PST035...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ndat6 &lt;- my_wrapper(\"https://www4.stat.ncsu.edu/~online/datasets/PST01d.csv\", default_var_name)\n\nRows: 3198 Columns: 42\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (22): Area_name, STCOU, PST045200N1, PST045200N2, PST045201N1, PST045201...\ndbl (20): PST045200F, PST045200D, PST045201F, PST045201D, PST045202F, PST045...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nThen, we call the combining function to put above four data sets into one object\n\ndat3_4 &lt;- my_combine(x=dat3, y=dat4)\ndat3_4_5 &lt;- my_combine(x=dat3_4, y=dat5)\nFinal_dat2 &lt;- my_combine(x=dat3_4_5, y=dat6)\n\n\n\nUse the plot function on the state data frame.\n\nplot.state(df = Final_dat2[[2]], var_name = \"number\")\n\n`summarise()` has grouped output by 'year'. You can override using the\n`.groups` argument.\n\n\n\n\n\n\n\n\n\n\n\nUse the plot function on the county data frame\nOnce specifying the state to be “CA”, the group being the top, the number looked at being 15\n\nplot.county(df=Final_dat2[[1]], Interest_state = \"CA\", var_name = \"number\", group = \"Top\", n = 15)\n\n`summarise()` has grouped output by 'year'. You can override using the\n`.groups` argument.\n\n\n\n\n\n\n\n\n\nOnce specifying the state to be “TX”, the group being the top, the number looked at being 4\n\nplot.county(df=Final_dat2[[1]], Interest_state = \"TX\", var_name = \"number\", group = \"Top\", n = 4)\n\n`summarise()` has grouped output by 'year'. You can override using the\n`.groups` argument.\n\n\n\n\n\n\n\n\n\nOnce without specifying anything (defaults used)\n\nplot.county(df=Final_dat2[[1]])\n\n`summarise()` has grouped output by 'year'. You can override using the\n`.groups` argument.\n\n\n\n\n\n\n\n\n\nOnce specifying the state to be “NY”, the group being the top, the number looked at being 10\n\nplot.county(df=Final_dat2[[1]], Interest_state = \"NY\", var_name = \"number\", group = \"Top\", n = 10)\n\n`summarise()` has grouped output by 'year'. You can override using the\n`.groups` argument."
  }
]